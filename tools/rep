#!/bin/bash

influx_host=http://localhost
influx_db=power
tz="America/Chicago"

# Day of the month billing starts
bill_day=11

cost_kwh=0.16
feed_rate=0.012

repdata=/tmp/rep.dat
tmp=/tmp/rep.tmp
FORMAT="%-30.30s %s\n"
DFORMAT="%-30.30s \$%.2f\n"
KFORMAT="%-30.30s %.2f kWh\n"

if test -n "${1}"; then
	today="${1}"
else
	today=$(date "+%Y-%m-%d")
fi
report_date=$(date -d "${today} -1 day" "+%Y-%m-%d")
report_year=$(date -d "${report_date}" "+%Y")
report_month=$(date -d "${report_date}" "+%m")
report_day=$(date -d "${report_date}" "+%d")

if test $report_day -lt $bill_day; then
	start_year=$(date -d "${report_year}-${report_month}-01 -1 month" "+%Y")
	start_mon=$(date -d "${report_year}-${report_month}-01 -1 month" "+%m")
	end_year=$(date -d "${report_date}" "+%Y")
	end_mon=$(date -d "${report_date}" "+%m")
else
	start_year=$(date -d "${report_date}" "+%Y")
	start_mon=$(date -d "${report_date}" "+%m")
	end_year=$(date -d "${report_year}-${report_month}-01 +1 month" "+%Y")
	end_mon=$(date -d "${report_year}-${report_month}-01 +1 month" "+%m")
fi

start_date=$(date -d "${start_year}-${start_mon}-${bill_day}" +%Y-%m-%d)
end_date=$(date -d "${end_year}-${end_mon}-${bill_day}" +%Y-%m-%d)

p1_start_day=${bill_day}
if test $report_day -ge $bill_day; then
	# go from bill start to end of month then 1st of next month to bill_day
	p1_end_day=$(date -d "${start_year}-${start_mon}-01 +1 month -1 day" +%d)
	p2_start_day=$(date -d "${start_year}-${start_mon}-01 +1 month" +%d)
else
	# from bill_day last month to end of last month then 1st of this month to bill_day
	p1_end_day=$(date -d "${end_year}-${end_mon}-01 -1 day" +%d)
	p2_start_day=$(date -d "${end_year}-${end_mon}-01" +%d)
fi
p2_end_day=$(date -d "${end_date}" "+%d")

influx_query() {
	q="$(echo $3 | sed 's: :+:g' | sed 's:;$::')"
#	curl -s "${1}:8086/query?db=${2}&epoch=hms.ms&q=${q}+tz('${tz}');"
	curl -s "${1}:8086/query?db=${2}&q=${q}+tz('${tz}');${4}"
}

influx_singleval() {
	data=$(influx_query $influx_host $influx_db "${1}")
	if test -n "$data"; then
		val=$(echo "$data" | jq .results[0].series[0].values[0][1])
	else
		val=0.0
	fi
	test "$val" = "null" && val="NULL"
	echo $val
}

get_usage() {
	if test -n "${2}"; then
		local total=0
		local count=0
		dt=${1}
		ed=${2}
		test -z "${ed}" && ed=$(date -d "$dt +1 day" "+%Y-%m-%d")
		while test "${dt}" != "${ed}"
		do
			usage=$(cat $repdata | grep "^${dt}" | awk -F, '{ print $2 }')
			if test -n "$usage" -a "$usage" != "NULL"; then
				total=$(echo "3k $usage $total + p" | dc 2>&1)
				test $(echo "$total" | grep -c "stack empty") -gt 0 && exit 1
				((count++))
			fi
			dt=$(date -d "$dt +1 day" "+%Y-%m-%d")
		done
		printf "%f,%d" "$total" "$count"
	else
		usage=$(cat $repdata | grep "^${1}" | awk -F, '{ print $2 }')
		test -z "$usage" && usage="NULL"
		echo $usage
	fi
}

old_collect() {
	# Get the first year of data
	data=$(influx_query $influx_host $influx_db "select first(input_power) from inverter")
	if test -n "$data"; then
		tv=$(echo "$data" | jq .results[0].series[0].values[0][0] | sed 's:T: :')
		dt=$(echo "$tv 1000000000 / p" | dc)
	else
		dt=$(date "+s")
	fi
	first_year=$(date -d "@${dt}" "+%Y")

	# Get usage for every day of every year of the cycle
	rm -f $repdata; touch $repdata
	year=$first_year
	while test $year -le $end_year
	do
		total=0
		dt="${year}-${start_mon}-${bill_day}"
		if test $start_mon -eq 12; then
			next_year=`expr $year + 1`
		else
			next_year=$year
		fi
		ed="${next_year}-${end_mon}-${bill_day}"
		count=0
		while test "$dt" != "$ed"
		do
#			echo "dt: $dt, ed: $ed"
			usage=$(influx_singleval "select sum(input_power)*-0.0000027778 from inverter where input_power < 0 and time > '${dt} 00:00:00' and time < '${dt} 23:59:59'")
			echo "${dt},${usage}" >> $repdata
			dt=$(date -d "$dt +1 day" "+%Y-%m-%d")
			((count++))
		done
		cycle_days=$count
		((year++))
	done
}

collect() {
	data=$(influx_query $influx_host $influx_db "select first(input_power) from inverter")
	if test -n "$data"; then
		first_year=$(echo "$data" | jq .results[0].series[0].values[0][0] | xargs | awk '{ print substr($0,1,4) }')
	else
		first_year=$(date "+%Y")
	fi

	rm -f $repdata; touch $repdata
	year=$first_year
	while test $year -le $end_year
	do
		total=0
		dt="${year}-${start_mon}-${bill_day}"
		if test $start_mon -eq 12; then
			dy=`expr $year + 1`
		else
			dy=$year
		fi
		ed="${dy}-${end_mon}-${bill_day}"
		data=$(influx_query $influx_host $influx_db "select sum(input_power)*-0.0000027778 from inverter where input_power < 0 and time >= '${dt} 00:00:00' and time < '${ed} 23:59:59' group by time(1d) fill(null)")
		if test $(echo "$data" | grep -c series) -gt 0; then
			echo "$data" | jq .results[0].series[].values[][] | xargs printf "%s,%s\n" | sed 's:null:NULL:' >> $repdata
			cycle_days=$(cat $repdata | grep "^${year}" | wc -l)
		fi
#		break
		((year++))
	done
}

skipcoll() {
	first_year=$(cat $repdata | head -1 | awk -F, '{ print $1 }' | awk -F- '{ print $1 }')
	dt="${year}-${start_mon}-${bill_day}"
	ed="${end_year}-${end_mon}-${end_day}"
	dt=$start_date
	count=0
	while test "$dt" != "$end_date"
	do
	        dt=$(date -d "$dt +1 day" "+%Y-%m-%d")
		((count++))
	done
	cycle_days=$count
}

# DAY
disp_usage() {
	report_day_usage=$(get_usage "${report_date}")
	test "$report_day_usage" = "NULL" && report_day_usage=0
	previous_year_date=$(date -d "${report_date} -1 year" "+%Y-%m-%d")
	previous_year_usage=$(get_usage "${previous_year_date}")
	test "$previous_year_usage" = "NULL" && previous_year_usage=0

#	printf "$FORMAT" "Report date:" "${report_date}"
	printf "$KFORMAT" "Usage:" "${report_day_usage}"
	printf "$KFORMAT" "Previous year:" "${previous_year_usage}"
	text=""
	if test $(echo "$report_day_usage == 0" | bc) -eq 1; then
		if test $(echo "$previous_year_usage == 0" | bc) -eq 1; then
			pct=100
		else
			pct=0
			text="less"
		fi
	else
		if test $(echo "$previous_year_usage == 0" | bc) -eq 1; then
			pct=0
			text="more"
		else
			if test $(echo "$previous_year_usage > $report_day_usage" | bc) -eq 1; then
				pct=$(echo "3k $report_day_usage $previous_year_usage / 100 * p" | dc)
				text="less"
			else
				pct=$(echo "3k $previous_year_usage $report_day_usage / 100 * p" | dc)
				text="more"
			fi
		fi
	fi
	diff=$(echo "3k 100.0 $pct - p" | dc)
	diff=$(printf "%.1f" "$diff")
	printf "$FORMAT" "Usage vs Previous year:" "${diff}% ${text}"

	# Show average for this day from previous years
	total=0
	count=0
	year=$first_year
	while test $year -lt $end_year
	do
		md=$(date -d "${report_date}" "+%m-%d")
		dt="${year}-${md}"
		data=$(cat $repdata | grep "^${dt}" | awk -F, '{ print $2 }')
		test -z "$data" && data="NULL"
		if test "$data" != "NULL"; then
			total=$(echo "3k $data $total + p" | dc)
			((count++))
		fi
		((year++))
	done
	if test $count -eq 0; then
		avg=0
		text=""
	else
		avg=$(echo "3k $total $count / p" | dc)
		if test $(echo "$avg > $report_day_usage" | bc) -eq 1; then
			pct=$(echo "3k $report_day_usage $avg / 100 * p" | dc)
			text="less"
		else
			pct=$(echo "3k $avg $report_day_usage / 100 * p" | dc)
			text="more"
		fi
	fi
	diff=$(echo "3k 100.0 $pct - p" | dc)
	diff=$(printf "%.1f" "$diff")

	printf "$KFORMAT" "Historical average:" "${avg}"
	printf "$FORMAT" "Usage vs Average:" "${diff}% ${text}"
}

# CYCLE
old_disp_cycle() {
	count=0
	total=0
	dt=$start_date
	while test "$dt" != "$end_date"
	do
		data=$(get_usage "${dt}")
		if test "$data" != "NULL"; then
			total=$(echo "3k $data $total + p" | dc)
			((count++))
		fi
	        dt=$(date -d "$dt +1 day" "+%Y-%m-%d")
		test "$dt" = "$today" && break
	done
}

disp_cycle() {
	usage=$(get_usage "${start_date}" "${end_date}")
	total=$(echo $usage | awk -F, '{ print $1 }')
	count=$(echo $usage | awk -F, '{ print $2 }')
	test $count -eq 0 && count=1
	avg=$(echo "3k $total $count / p" | dc)
	pro=$(echo "$avg $cycle_days * p" | dc)
	test $(echo "$pro < $total" | bc) -eq 1 && pro=$total
	cost=$(echo "2k $pro $cost_kwh * p" | dc)

	echo ""
#	printf "$FORMAT" "Cycle range:" "${start_date} to ${end_date}"
#	printf "$FORMAT" "Cycle days:" "${cycle_days}"
	printf "$KFORMAT" "Cycle usage:" "${total}"
	printf "$KFORMAT" "Daily average:" "${avg}"
	printf "$KFORMAT" "Projected total:" "${pro}"
	printf "$DFORMAT" "Projected cost:" "${cost}"
}

old_disp_lastcycle() {
	dt=$(date -d "${start_date} -1 year" "+%Y-%m-%d")
	if test $start_mon -eq 12; then
		dy=$year
	else
		dy=`expr $start_year - 1`
	fi
	ed="${dy}-${end_mon}-${bill_day}"
	total=0
	count=0
	while test "$dt" != "$ed"
	do
#		echo "dt: $dt, ed: $ed"
#		data=$(cat $repdata | grep "^${dt}" | awk -F, '{ print $2 }')
#		test -z "$data" && data="NULL"
		data=$(get_usage "${dt}")
		if test "$data" != "NULL"; then
			total=$(echo "3k $data $total + p" | dc)
			((count++))
		fi
		dt=$(date -d "$dt +1 day" "+%Y-%m-%d")
	done
}

disp_lastcycle() {
	dt=$(date -d "${start_date} -1 year" "+%Y-%m-%d")
	ed=$(date -d "${dt} +1 month" "+%Y-%m-%d")
	usage=$(get_usage "${dt}" "${ed}")
#	echo "disp_lastcycle: usage: $usage"
	total=$(echo $usage | awk -F, '{ print $1 }')
	count=$(echo $usage | awk -F, '{ print $2 }')
	test $count -eq 0 && count=1
#	echo $total $count
	avg=$(echo "3k $total $count / p" | dc)
#	echo $avg
	echo ""
	printf "$KFORMAT" "Last year cycle usage:" "${total}"
	if test -n "$pro"; then
		if test $(echo "$total == 0" | bc) -eq 1; then
			if test $(echo "$pro == 0" | bc) -eq 1; then
				pct=100
			else
				pct=0
				text="more"
			fi
		else
			if test $(echo "$pro == 0" | bc) -eq 1; then
				pct=0
				text="less"
			else
				if test $(echo "$total > $pro" | bc) -eq 1; then
					pct=$(echo "3k $pro $total / 100 * p" | dc)
					text="less"
				else
					pct=$(echo "3k $total $pro / 100 * p" | dc)
					text="more"
				fi
			fi
		fi
		diff=$(echo "3k 100.0 $pct - p" | dc)
		diff=$(printf "%.1f" "$diff")
		printf "$FORMAT" "Projected vs last year:" "${diff}% ${text}"
		if test "$text" = "less"; then
			lmc=$(echo "2k $total $cost_kwh * p" | dc)
			save=$(echo "2k $lmc $cost - p" | dc)
			printf "$DFORMAT" "Savings vs last year:" "${save}"
		fi
	fi
}

old_disp_cycleavg() {
	total=0
	count=0
	year=$first_year
	dy=$(date -d "${end_date} -1 year" "+%Y")
	while test $year -le $dy
	do
		dt="${year}-${start_mon}-${bill_day}"
		if test $start_mon -eq 12; then
			next_year=`expr $year + 1`
		else
			next_year=$year
		fi
		ed="${next_year}-${end_mon}-${bill_day}"
		while test "$dt" != "$ed"
		do
#			echo "dt: $dt, ed: $ed"
			data=$(cat $repdata | grep "^${dt}" | awk -F, '{ print $2 }')
			test -z "$data" && data="NULL"
			test "$data" != "NULL" && total=$(echo "3k $data $total + p" | dc)
			dt=$(date -d "$dt +1 day" "+%Y-%m-%d")
		done
		((count++))
		((year++))
	done
}

disp_cycleavg() {
	total=0
	count=0
	year=$first_year
	dy=$(date -d "${today} -1 year" "+%Y")
	while test $year -le $dy
	do
		dt="${year}-${start_mon}-${bill_day}"
		ed=$(date -d "${dt} +1 month" "+%Y-%m-%d")
		usage=$(get_usage "${dt}" "${ed}")
#		echo "${dt} to ${ed} usage: >>$usage<<"
		usage_total=$(echo $usage | awk -F, '{ print $1 }')
		total=$(echo "3k $usage_total $total + p" | dc)
		((count++))
		((year++))
	done
#	echo "total: $total, count: $count"
	test $count -eq 0 && count=1
	avg=$(echo "3k $total $count / p" | dc)
	echo ""
	printf "$KFORMAT" "Cycle average(all years):" "${avg}"
	mc=$(echo "2k $avg $cost_kwh * p" | dc)
	printf "$DFORMAT" "Cycle average cost:" "${mc}"
	if test -n "$pro"; then
		if test $(echo "$avg == 0" | bc) -eq 1; then
			if test $(echo "$pro == 0" | bc) -eq 1; then
				pct=100
			else
				pct=0
				text="more"
			fi
		else
			if test $(echo "$pro == 0" | bc) -eq 1; then
				pct=0
				text="less"
			else
				if test $(echo "$avg > $pro" | bc) -eq 1; then
					pct=$(echo "3k $pro $avg / 100 * p" | dc)
					text="less"
				else
					pct=$(echo "3k $avg $pro / 100 * p" | dc)
					text="more"
				fi
			fi
		fi
		diff=$(echo "3k 100.0 $pct - p" | dc)
		diff=$(printf "%.1f" "$diff")
		printf "$FORMAT" "Projected vs average:" "${diff}% ${text}"
		if test "$text" = "less"; then
			save=$(echo "2k $mc $cost - p" | dc)
			printf "$DFORMAT" "Savings vs average:" "${save}"
		fi
	fi
}

disp_feed() {
	feed_kwh=$(influx_singleval "select sum(input_power)*0.0000027778 from inverter where input_power > 0 and time > '${start_date} 00:00:00' and time < '${end_date} 23:59:59'")
	test -z "$feed_kwh" && feed_kwh=0
	test "$feed_kwh" = "NULL" && feed_kwh=0
	favg=$(echo "3k $feed_kwh $cycle_days / p" | dc)
	fpro=$(echo "3k $favg $cycle_days * p" | dc)
	test $(echo "$fpro < $feed_kwh" | bc) -eq 1 && fpro=$feed_kwh
	fret=$(echo "3k $fpro $feed_rate * p" | dc)
	test -n "$cost" && tcost=$(echo "3k $cost $fret - p" | dc)

	echo ""
	printf "$KFORMAT" "Total power fed back to grid:" "${feed_kwh}"
	printf "$KFORMAT" "Daily average of total:" "${favg}"
	printf "$KFORMAT" "Projected monthly total:" "${fpro}"
	printf "$DFORMAT" "Projected monthly return:" "${fret}"
	if test -n "$cost"; then
		echo ""
		printf "$DFORMAT" ">>> Overall projected cost:" "${tcost}"
	fi
}

disp_byhour() {
	data=$(influx_query $influx_host $influx_db "select sum(input_power)*-0.0000027778 from inverter where input_power < 0 and time > '${report_date} 00:00:00' and time < '${report_date} 23:59:59' group by time(1h) fill(0)" "epoch=hms.ms")
	if test $(echo "$data" | grep -c series) -gt 0; then
		echo ""
		echo "Hourly usage:"
		printf "%-25.25s %6.6s\n" "Timestamp" "kWh"
		echo "$data" | jq .results[0].series[].values[][] | paste -d " "  - - > $tmp
		total=0.0
		while read tv pv
		do
			tf=$(echo "$tv 1000000000 / p" | dc)
			ts=$(date -d "@$tf" "+%Y-%m-%d %H:%M:%S")
			val=$(echo "$pv" | awk -F"E" 'BEGIN{OFMT="%f"} {print $1 * (10 ^ $2)}')
			printf "%-25.25s %6.2f\n" "$ts" "${val}"
			total=$(echo "$total $val + p" | dc)
		done < $tmp
		printf "%-25.25s %6.2f\n" "Total:" "$total"
	fi
}

disp_lastbyhour() {
	last_repday=$(date -d "${report_date} -1 year" "+%Y-%m-%d")
	data=$(influx_query $influx_host $influx_db "select sum(input_power)*-0.0000027778 from inverter where input_power < 0 and time > '${last_repday} 00:00:00' and time < '${last_repday} 23:59:59' group by time(1h) fill(0)" "epoch=hms.ms")
	if test $(echo "$data" | grep -c series) -gt 0; then
		echo ""
		echo "Previous Year hourly usage:"
		printf "%-25.25s %6.6s\n" "Timestamp" "kWh"
		echo "$data" | jq .results[0].series[].values[][] | paste -d " "  - - > $tmp
		total=0.0
		while read tv pv
		do
			tf=$(echo "$tv 1000000000 / p" | dc)
			ts=$(date -d "@$tf" "+%Y-%m-%d %H:%M:%S")
			val=$(echo "$pv" | awk -F"E" 'BEGIN{OFMT="%f"} {print $1 * (10 ^ $2)}')
			printf "%-25.25s %6.2f\n" "$ts" "${val}"
			total=$(echo "$total $val + p" | dc)
		done < $tmp
		printf "%-25.25s %6.2f\n" "Total:" "$total"
	fi
}

disp_hist() {
	# Create formats
	hformat="%-5s "
	format="%5s "

	if test $start_year -ne $end_year; then
		hist_end_year=$(expr $end_year - 1)
	else
		hist_end_year=$end_year
	fi
	year=$first_year
	while test $year -le $hist_end_year
	do
		hformat="$hformat  %7.7s"
		format="$format  %7.7s"
		((year++))
	done
	hformat="${hformat}\n"
#	echo "hformat: $hformat"
	format="${format}\n"
#	echo "format: $format"

	echo ""
	echo "Historical Usage:"

	# Display header
	cmd="printf \"\${hformat}\" \"date\""
	year=$first_year
	while test $year -le $hist_end_year
	do
		cmd="$cmd \"${year}\""
		((year++))
	done
	#echo "cmd: $cmd"
	eval $cmd
	cmd="printf \"\${hformat}\" \"=====\""
	year=$first_year
	while test $year -le $hist_end_year
	do
		cmd="$cmd \"=======\""
		((year++))
	done
	#echo "cmd: $cmd"
	eval $cmd

	# Init totals array
	declare -A totals
	year=$first_year
	while test $year -le $hist_end_year
	do
		eval totals[${year}]=0.0
		((year++))
	done

	# collect the data into a "daily" array
	year=$first_year
	while test $year -le $hist_end_year
	do
		md=$(echo "$start_date" | awk -F- '{ print $2"-"$3 }')
		dt=${year}-${md}
		ed=$(date -d "$dt +1 month" "+%Y-%m-%d")
		while test $dt != $ed
		do
			arr="a$(echo "$dt" | awk -F- '{ print $2$3 }')"
			eval $arr[$year]=$(get_usage "$dt")
			eval val="\${$arr[$year]}"
			dt=$(date -d "$dt +1 day" "+%Y-%m-%d")
		done
		((year++))
	done

	# print the data
	dt=$start_date
	while test $dt != $end_date
	do
#		echo "dt: $dt, ed: $end_date"
		md=$(echo "$dt" | awk -F- '{ print $2"-"$3 }')
		cmd="printf \"\${format}\" \"${md}\""
		year=$first_year
		while test $year -le $hist_end_year
		do
			arr="a$(echo "$dt" | awk -F- '{ print $2$3 }')"
			eval usage="\${$arr[$year]}"
			test -z "$usage" && usage="NULL"
#			test "${year}-${md}" = "$today" && usage="NULL"
			if test "$usage" != "NULL"; then
				eval totals[${year}]=$(echo "${totals[${year}]} $usage + p" | dc)
				usage=$(printf "%.2f" "$usage")
			fi
			cmd="$cmd \"${usage}\""
			((year++))
		done
		eval $cmd
		# XXX forever leap year
		if test "$md" = "02-28"; then
			dt="${start_year}-02-29"
		elif test "$md" = "02-29"; then
			dt="${start_year}-03-01"
		else
			dt=$(date -d "$dt +1 day" "+%Y-%m-%d")
		fi
	done

	cmd="printf \"\${hformat}\" \"=====\""
	year=$first_year
	while test $year -le $hist_end_year
	do
		cmd="$cmd \"=======\""
		((year++))
	done
	#echo "cmd: $cmd"
	eval $cmd

	cmd="printf \"\${hformat}\" \"Total\""
	year=$first_year
	while test $year -le $hist_end_year
	do
		eval val=\${totals[${year}]}
		total=$(printf "%6.2f" "$val")
		cmd="$cmd \"${total}\""
		((year++))
	done
	#echo "cmd: $cmd"
	eval $cmd
}

collect
#skipcoll
ry=$(echo "${report_date}" | awk -F- '{ print $1 }')
test $ry -lt $first_year && first_year=$ry
disp_usage
disp_cycle
disp_lastcycle
disp_cycleavg
disp_feed
disp_byhour
disp_lastbyhour
disp_hist

exit 0
